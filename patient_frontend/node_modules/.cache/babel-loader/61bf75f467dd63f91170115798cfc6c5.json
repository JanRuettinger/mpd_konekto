{"ast":null,"code":"var _jsxFileName = \"/patient_frontend/src/src/Views/Message/index.js\";\nimport React from 'react';\nimport { Grid, TextField } from '@material-ui/core';\nimport Button from '../../custom_theme/components/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Header } from '../../Layout';\nimport MesButton from './MesButton';\nimport Container from '../../custom_theme/components/Container';\nimport AppContext from '../../utils/AppContext';\nimport API from '../../utils/API';\nimport CONSTANTS from '../../utils/Constants';\nimport socketIOClient from 'socket.io-client';\nimport Modal from '@material-ui/core/Modal';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    direction: 'column',\n    width: '100%',\n    height: '100%'\n  },\n  title: {\n    'text-align': 'center'\n  },\n  buttonsBox: {\n    'margin-top': theme.spacing(0),\n    'margin-bottom': theme.spacing(0),\n    'margin-left': '20px',\n    'margin-right': '20px',\n    height: '500px'\n  },\n  textField: {\n    'border-radius': '10px',\n    background: 'white',\n    'margin-top': '10px',\n    'margin-bottom': '5px',\n    alignContent: 'center',\n    width: '100%',\n    height: '100px'\n  },\n  messagesContainer: {\n    height: '50%',\n    width: '100%',\n    background: 'rgba(255, 255, 255, 0.8)'\n  },\n  textBox: {\n    backgroundColor: theme.palette.primary.main,\n    padding: '7px',\n    borderRadius: '20px',\n    borderTopRightRadius: '2px',\n    margin: '10px',\n    fontSize: '15px',\n    color: 'white'\n  },\n  textBoxRescue: {\n    backgroundColor: '#D3D3D3\t',\n    padding: '7px',\n    'border-radius': '20px',\n    borderTopLeftRadius: '2px',\n    margin: '10px',\n    fontSize: '15px'\n  },\n  emptyContainer: {\n    height: '100px',\n    width: '100%'\n  },\n  paper: {\n    position: 'relative',\n    backgroundColor: '#01796F',\n    //   border: \"2px solid #000\",\n    padding: theme.spacing(2, 4, 4),\n    outline: 'none',\n    marginTop: '180px',\n    marginLeft: '30px',\n    marginRight: '30px',\n    'border-radius': '20px',\n    color: 'white'\n  }\n});\n\nclass Message extends React.Component {\n  constructor(props) {\n    super(props);\n    this.classes = props.classes;\n    this.state = {\n      id: 'false',\n      // keeps id of which button has been pressed to send the corresponding message\n      sendMessage: 'false',\n      buttonPressed: 'false',\n      showMessage: React.createElement(\"div\", {\n        className: this.classes.emptyContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }) // output message state\n\n    };\n    this.onChangeText = this.onChangeText.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.getMessageBox = this.getMessageBox.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen() {\n    setTimeout(() => this.setState({\n      showModal: true\n    }), 3000);\n    console.log('handleopen called  ');\n  }\n\n  handleClose() {\n    console.log('closing-modal');\n    this.setState({\n      showModal: false\n    });\n  }\n\n  async componentDidMount() {\n    let from = 1; // hardcoded patient_id\n\n    let to = 1000; //harcoded\n\n    API.getChat(to, from).then(data => {\n      console.log(data);\n      this.setState({\n        messages: data\n      });\n    });\n    const socket = socketIOClient(CONSTANTS.SOCKETURL);\n    socket.on('emergency_status_change', data => this.handleOpen());\n    socket.on('message', data => this.getNewMessages());\n    await this.getNewMessages();\n  }\n\n  getNewMessages() {\n    console.log('In getNewMessages'); // let to = this.state.patient_id;\n\n    API.getChat(CONSTANTS.TO, CONSTANTS.FROM).then(data => {\n      console.log('Received data in getChat: ');\n      console.log(data);\n      setTimeout(() => this.setState({\n        messages: data\n      }), 2000);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  onChangeText(e) {\n    console.log('text has changed.');\n    const key = e.target.id;\n    const value = e.target.value;\n    let state_obj = {};\n    state_obj[key] = value;\n    this.setState(state_obj);\n    this.setState({\n      sendCustomMessage: 'true'\n    });\n    console.log(this.state.text);\n  }\n\n  sendMessage(Message) {\n    API.createMessage(CONSTANTS.FROM, Message, CONSTANTS.TO);\n  }\n\n  async onSubmit(id) {\n    this.setState({\n      id: id,\n      buttonPressed: 'true'\n    });\n    let message = '';\n    let from = 1; // hardcoded patient_id\n\n    let to = 1000; //harcoded\n    // eslint-disable-next-line default-case\n\n    switch (id) {\n      case 'Custom':\n        message = this.state.SMS;\n        this.setState({\n          SMS: ''\n        });\n        break;\n\n      case 'Arrival':\n        message = 'When will you arrive?';\n        break;\n\n      case 'Food':\n        message = 'Please bring food for me';\n        break;\n\n      case 'Defibrillator':\n        message = 'Please bring a Defibrillator';\n        break;\n\n      case 'Medication':\n        message = 'Please bring Medication for me';\n        break;\n\n      case 'Water':\n        message = 'Please bring Water for me';\n        break;\n\n      case 'Helicopter':\n        message = 'You need a helicopter to get to my location  ';\n        break;\n\n      case 'Rope':\n        message = 'You will need rope to reach my location';\n        break;\n\n      case 'Dangerous':\n        message = 'Path to my location is dangerous';\n        break;\n\n      default:\n        return;\n    }\n\n    await API.createMessage(from, message, to = 1000).then(res => {\n      console.log('Message was sucessfully transmitted');\n    });\n    API.getChat(to, from).then(data => {\n      console.log(data);\n      this.setState({\n        messages: data\n      });\n    });\n  }\n\n  getMessageBox() {\n    let messages = this.state.messages;\n    let Messages = null;\n\n    if (messages) {\n      Messages = messages.map(msg => {\n        console.log(msg);\n        return React.createElement(Grid, {\n          key: msg._id,\n          id: \"first message container\",\n          container: true,\n          display: \"flex\",\n          direction: \"row\",\n          justify: msg.to === CONSTANTS.FROM ? 'flex-start' : 'flex-end' // alignItems=\"center\"\n          ,\n          height: \"100%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          style: {\n            width: '70%'\n          },\n          item: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: msg.to === CONSTANTS.FROM ? this.classes.textBoxRescue : this.classes.textBox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }, msg.message)));\n      });\n    }\n\n    return Messages;\n  }\n\n  render() {\n    let sendButton;\n\n    if (this.state.sendCustomMessage == 'true') {\n      sendButton = React.createElement(MesButton, {\n        id: \"Custom\",\n        variant: \"contained\",\n        onClick: () => {\n          this.onSubmit('Custom');\n        },\n        text: \"Send\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      });\n    } else {\n      switch (this.state.id) {\n        case 'Bring':\n          sendButton = React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263\n            },\n            __self: this\n          }, React.createElement(MesButton, {\n            id: \"Food\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Food');\n            },\n            text: \"Food\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Defibrillator\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Defibrillator');\n            },\n            text: \"Defibrillator\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Medication\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Medication');\n            },\n            text: \"Medication\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Water\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Water');\n            },\n            text: \"Water\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288\n            },\n            __self: this\n          }), ' ');\n          break;\n\n        case 'Location':\n          sendButton = React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301\n            },\n            __self: this\n          }, React.createElement(MesButton, {\n            id: \"Helicopter\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Helicopter');\n            },\n            text: \"Need a Helicopter\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Rope\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Rope');\n            },\n            text: \"Need a Rope\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 310\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Dangerous\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Dangerous');\n            },\n            text: \"Dangerous path conditions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            },\n            __self: this\n          }));\n          break;\n\n        default:\n          sendButton = React.createElement(React.Fragment, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333\n            },\n            __self: this\n          }, React.createElement(MesButton, {\n            id: \"Arrival\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Arrival');\n            },\n            text: \"Ask about arrival time\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Bring\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Bring');\n            },\n            text: \"Ask for something to bring\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 342\n            },\n            __self: this\n          }), React.createElement(MesButton, {\n            id: \"Location\",\n            variant: \"contained\",\n            onClick: () => {\n              this.onSubmit('Location');\n            },\n            text: \"Inform them about the location\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350\n            },\n            __self: this\n          }));\n          break;\n      }\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Header, {\n      title: \"Chat with Emergency Team\",\n      BackButton: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      open: this.state.showModal,\n      onClose: this.handleClose //className={this.classes.modal}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: this.classes.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      align: \"center\",\n      id: \"modal-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"The emergency rescue team has been dispatched\"), React.createElement(\"h4\", {\n      align: \"center\",\n      id: \"modal-subtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"Message from rescue team:\"), React.createElement(\"p\", {\n      id: \"simple-modal-description\",\n      style: {\n        backgroundColor: 'white',\n        padding: '10px',\n        'border-radius': '10px',\n        //  boxShadow: '1px 2px 4px grey',\n        //border: '1px solid #000',\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"Dear \", this.context.fullname, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), \"We are on our way to help you, please stay calm and do not change your location.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), \"Alpine Rescue\"), React.createElement(Button, {\n      onClick: this.handleClose,\n      variant: \"text\",\n      color: \"secondary\",\n      size: \"medium\",\n      style: {\n        backgroundColor: 'grey',\n        color: 'white',\n        fontWeight: 'normal'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"close\"))), React.createElement(\"div\", {\n      id: \"Main messages container\",\n      className: this.classes.messagesContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, this.getMessageBox()), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"flex-start\",\n      alignItems: \"stretch\",\n      height: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      className: this.classes.textField,\n      id: \"SMS\",\n      placeholder: \"Choose template message from below or type here\",\n      multiline: true,\n      onChange: this.onChangeText,\n      inputProps: {\n        style: {\n          fontSize: 17\n        }\n      } // font size of input text\n      ,\n      InputLabelProps: {\n        style: {\n          fontSize: 17\n        }\n      } // font size of input label\n      ,\n      value: this.state.SMS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }), sendButton)));\n  }\n\n}\n\nMessage.contextType = AppContext;\nexport default withStyles(styles)(Message);","map":{"version":3,"sources":["/patient_frontend/src/src/Views/Message/index.js"],"names":["React","Grid","TextField","Button","withStyles","Header","MesButton","Container","AppContext","API","CONSTANTS","socketIOClient","Modal","styles","theme","root","display","direction","width","height","title","buttonsBox","spacing","textField","background","alignContent","messagesContainer","textBox","backgroundColor","palette","primary","main","padding","borderRadius","borderTopRightRadius","margin","fontSize","color","textBoxRescue","borderTopLeftRadius","emptyContainer","paper","position","outline","marginTop","marginLeft","marginRight","Message","Component","constructor","props","classes","state","id","sendMessage","buttonPressed","showMessage","onChangeText","bind","onSubmit","getMessageBox","handleOpen","handleClose","setTimeout","setState","showModal","console","log","componentDidMount","from","to","getChat","then","data","messages","socket","SOCKETURL","on","getNewMessages","TO","FROM","catch","err","e","key","target","value","state_obj","sendCustomMessage","text","createMessage","message","SMS","res","Messages","map","msg","_id","render","sendButton","context","fullname","fontWeight","style","contextType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Grid, TextField } from '@material-ui/core';\nimport Button from '../../custom_theme/components/Button';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { Header } from '../../Layout';\nimport MesButton from './MesButton';\nimport Container from '../../custom_theme/components/Container';\nimport AppContext from '../../utils/AppContext';\nimport API from '../../utils/API';\nimport CONSTANTS from '../../utils/Constants';\nimport socketIOClient from 'socket.io-client';\nimport Modal from '@material-ui/core/Modal';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    direction: 'column',\n    width: '100%',\n    height: '100%'\n  },\n  title: {\n    'text-align': 'center'\n  },\n  buttonsBox: {\n    'margin-top': theme.spacing(0),\n    'margin-bottom': theme.spacing(0),\n    'margin-left': '20px',\n    'margin-right': '20px',\n    height: '500px'\n  },\n  textField: {\n    'border-radius': '10px',\n    background: 'white',\n    'margin-top': '10px',\n    'margin-bottom': '5px',\n    alignContent: 'center',\n    width: '100%',\n    height: '100px'\n  },\n  messagesContainer: {\n    height: '50%',\n    width: '100%',\n    background: 'rgba(255, 255, 255, 0.8)'\n  },\n  textBox: {\n    backgroundColor: theme.palette.primary.main,\n    padding: '7px',\n    borderRadius: '20px',\n    borderTopRightRadius: '2px',\n    margin: '10px',\n    fontSize: '15px',\n    color:'white'\n  },\n\n  textBoxRescue: {\n    backgroundColor: '#D3D3D3\t',\n    padding: '7px',\n    'border-radius': '20px',\n    borderTopLeftRadius: '2px',\n    margin: '10px',\n    fontSize: '15px'\n  },\n  emptyContainer: {\n    height: '100px',\n    width: '100%'\n  },\n  paper: {\n    position: 'relative',\n    backgroundColor: '#01796F',\n    //   border: \"2px solid #000\",\n    padding: theme.spacing(2, 4, 4),\n    outline: 'none',\n    marginTop: '180px',\n    marginLeft: '30px',\n    marginRight: '30px',\n    'border-radius': '20px',\n    color: 'white',\n  }\n});\n\nclass Message extends React.Component {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n\n    this.classes = props.classes;\n    this.state = {\n      id: 'false', // keeps id of which button has been pressed to send the corresponding message\n      sendMessage: 'false',\n      buttonPressed: 'false',\n      showMessage: <div className={this.classes.emptyContainer} /> // output message state\n    };\n    this.onChangeText = this.onChangeText.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.getMessageBox = this.getMessageBox.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.handleOpen = this.handleOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleOpen() {\n    setTimeout(()=>  this.setState({ showModal: true }), 3000);\n     console.log('handleopen called  ');\n   }\n   handleClose() {\n     console.log('closing-modal');\n     this.setState({ showModal: false });\n   }\n \n\n\n\n\n  async componentDidMount() {\n    let from = 1; // hardcoded patient_id\n    let to = 1000; //harcoded\n    API.getChat(to, from).then(data => {\n      console.log(data);\n      this.setState({ messages: data });\n    });\n\n    const socket = socketIOClient(CONSTANTS.SOCKETURL);\n    socket.on('emergency_status_change', data =>\n     this.handleOpen());\n    socket.on('message', data => this.getNewMessages());\n    await this.getNewMessages();\n\n\n  }\n\n  getNewMessages() {\n    console.log('In getNewMessages');\n    // let to = this.state.patient_id;\n    API.getChat(CONSTANTS.TO, CONSTANTS.FROM)\n      .then(data => {\n        console.log('Received data in getChat: ');\n        console.log(data);\n       setTimeout(()=> this.setState({ messages: data })  ,2000 ) ;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  onChangeText(e) {\n    console.log('text has changed.');\n    const key = e.target.id;\n    const value = e.target.value;\n    let state_obj = {};\n    state_obj[key] = value;\n    this.setState(state_obj);\n    this.setState({ sendCustomMessage: 'true' });\n    console.log(this.state.text);\n  }\n\n  sendMessage(Message) {\n    API.createMessage(CONSTANTS.FROM, Message, CONSTANTS.TO);\n  }\n  async onSubmit(id) {\n    this.setState({ id: id, buttonPressed: 'true' });\n    let message = '';\n    let from = 1; // hardcoded patient_id\n    let to = 1000; //harcoded\n    // eslint-disable-next-line default-case\n    switch (id) {\n      case 'Custom':\n        message = this.state.SMS;\n        this.setState({ SMS: '' });\n        break;\n      case 'Arrival':\n        message = 'When will you arrive?';\n        break;\n      case 'Food':\n        message = 'Please bring food for me';\n        break;\n      case 'Defibrillator':\n        message = 'Please bring a Defibrillator';\n        break;\n      case 'Medication':\n        message = 'Please bring Medication for me';\n        break;\n      case 'Water':\n        message = 'Please bring Water for me';\n        break;\n      case 'Helicopter':\n        message = 'You need a helicopter to get to my location  ';\n        break;\n      case 'Rope':\n        message = 'You will need rope to reach my location';\n        break;\n      case 'Dangerous':\n        message = 'Path to my location is dangerous';\n        break;\n      default:\n        return;\n    }\n\n    await API.createMessage(from, message, (to = 1000)).then(res => {\n      console.log('Message was sucessfully transmitted');\n    });\n    API.getChat(to, from).then(data => {\n      console.log(data);\n      this.setState({ messages: data });\n    });\n  }\n\n  getMessageBox() {\n    let messages = this.state.messages;\n\n    let Messages = null;\n    if (messages) {\n      Messages = messages.map(msg => {\n        console.log(msg);\n\n        return (\n          <Grid\n            key={msg._id}\n            id=\"first message container\"\n            container\n            display=\"flex\"\n            direction=\"row\"\n            justify={msg.to === CONSTANTS.FROM ? 'flex-start' : 'flex-end'}\n            // alignItems=\"center\"\n            height=\"100%\"\n          >\n            <Grid style={{ width: '70%' }} item>\n              <div\n                className={\n                  msg.to === CONSTANTS.FROM\n                    ? this.classes.textBoxRescue\n                    : this.classes.textBox\n                }\n              >\n                {msg.message}\n              </div>\n            </Grid>\n          </Grid>\n        );\n      });\n    }\n    return Messages;\n  }\n\n  render() {\n    let sendButton;\n\n    if (this.state.sendCustomMessage == 'true') {\n      sendButton = (\n        <MesButton\n          id=\"Custom\"\n          variant=\"contained\"\n          onClick={() => {\n            this.onSubmit('Custom');\n          }}\n          text=\"Send\"\n        />\n      );\n    } else {\n      switch (this.state.id) {\n        case 'Bring':\n          sendButton = (\n            <React.Fragment>\n              <MesButton\n                id=\"Food\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Food');\n                }}\n                text=\"Food\"\n              />\n              <MesButton\n                id=\"Defibrillator\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Defibrillator');\n                }}\n                text=\"Defibrillator\"\n              />\n              <MesButton\n                id=\"Medication\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Medication');\n                }}\n                text=\"Medication\"\n              />\n              <MesButton\n                id=\"Water\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Water');\n                }}\n                text=\"Water\"\n              />{' '}\n            </React.Fragment>\n          );\n          break;\n        case 'Location':\n          sendButton = (\n            <React.Fragment>\n              <MesButton\n                id=\"Helicopter\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Helicopter');\n                }}\n                text=\"Need a Helicopter\"\n              />\n              <MesButton\n                id=\"Rope\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Rope');\n                }}\n                text=\"Need a Rope\"\n              />\n              <MesButton\n                id=\"Dangerous\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Dangerous');\n                }}\n                text=\"Dangerous path conditions\"\n              />\n            </React.Fragment>\n          );\n\n          break;\n\n        default:\n          sendButton = (\n            <React.Fragment>\n              <MesButton\n                id=\"Arrival\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Arrival');\n                }}\n                text=\"Ask about arrival time\"\n              />\n              <MesButton\n                id=\"Bring\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Bring');\n                }}\n                text=\"Ask for something to bring\"\n              />\n              <MesButton\n                id=\"Location\"\n                variant=\"contained\"\n                onClick={() => {\n                  this.onSubmit('Location');\n                }}\n                text=\"Inform them about the location\"\n              />\n            </React.Fragment>\n          );\n          break;\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Header title=\"Chat with Emergency Team\" BackButton=\"true\" />\n        \n        <Container>\n        <Modal\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n              open={this.state.showModal}\n              onClose={this.handleClose}\n              //className={this.classes.modal}\n            >\n              <div className={this.classes.paper}>\n                <h3 align=\"center\" id=\"modal-title\">\n                The emergency rescue team has been dispatched\n                </h3>\n                <h4 align=\"center\" id=\"modal-subtitle\" >\n                  Message from rescue team:\n                </h4>\n                <p\n                  id=\"simple-modal-description\"\n                  style={{\n                    backgroundColor: 'white',\n                    padding: '10px',\n                    'border-radius': '10px',\n                  //  boxShadow: '1px 2px 4px grey',\n                    //border: '1px solid #000',\n                    color: 'black'\n                  }}\n                >\n                  Dear {this.context.fullname}, {<br />}\n                  We are on our way to help you, please stay calm and do not\n                  change your location.\n                  {<br />}\n                  Alpine Rescue\n                </p>\n                <Button\n                  onClick={this.handleClose}\n                  variant=\"text\"\n                color=\"secondary\"\n                size=\"medium\"              \n                  style={{ backgroundColor: 'grey', color: 'white',fontWeight:'normal' }}\n                >\n                  close\n                </Button>\n              </div>\n            </Modal>\n          <div\n            id=\"Main messages container\"\n            className={this.classes.messagesContainer}\n          >\n            {this.getMessageBox()}\n          </div>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-start\"\n            alignItems=\"stretch\"\n            height=\"100%\"\n          >\n\n            <TextField\n              className={this.classes.textField}\n              id=\"SMS\"\n              placeholder=\"Choose template message from below or type here\"\n              multiline\n              onChange={this.onChangeText}\n              inputProps={{ style: { fontSize: 17 } }} // font size of input text\n              InputLabelProps={{ style: { fontSize: 17 } }} // font size of input label\n              value={this.state.SMS}\n            />\n            {sendButton}\n          </Grid>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Message);\n"]},"metadata":{},"sourceType":"module"}